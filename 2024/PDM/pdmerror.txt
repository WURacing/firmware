From PDM.ino:
// if (aux1_c > AUX1F_LIMIT)
  // {
  //   aux1_error += aux1_c - AUX1F_LIMIT;
  // }
  // if (aux2_c > AUX2F_LIMIT)
  // {
  //   aux2_error += aux2_c - AUX2F_LIMIT;
  // }
  // if (pe3_c > PE3F_LIMIT)
  // {
  //   pe3_error += pe3_c - PE3F_LIMIT;
  // }
  // if (eth_c > ETHF_LIMIT)
  // {
  //   eth_error += eth_c - ETHF_LIMIT;
  // }
  // if (eng_c > ENGF_LIMIT)
  // {
  //   eng_error += eng_c - ENGF_LIMIT;
  // }
  // if (fp_c > FPF_LIMIT)
  // { // relay(true, ENGRD);
  //   // relay(true, AUX1RD);
  //   // relay(true, CANRD);
  //   // relay(true, AUX2RD);
  //   fp_error += fp_c - FPF_LIMIT;
  // }
  // if (fan_c > FANF_LIMIT)
  // {
  //   fan_error += fan_c - FANF_LIMIT;
  // }
  // if (can_c > CANF_LIMIT)
  // {
  //   can_error += can_c - CANF_LIMIT;
  // }
  // if (wtp_c > WTPF_LIMIT)
  // {
  //   wtp_error += wtp_c - WTPF_LIMIT;
  // }
  // if (str_c > STRF_LIMIT)
  // {
  //   str_error += str_c - STRF_LIMIT;
  // }

  // Digital circuit breaking
  // if (aux1_c < 0 || aux1_error > ACCEPTED_ERROR)
  // {
  //   Serial.print("Aux1 error: ");
  //   Serial.println(aux1_error);
  //   relay(false, AUX1RD); // disable relay
  // }
  // if (aux2_c < 0 || aux2_error > ACCEPTED_ERROR)
  // {
  //   Serial.print("Aux2 error: ");
  //   Serial.println(aux2_error);
  //   relay(false, AUX2RD);
  // }
  // if (pe3_c < 0 || pe3_error > ACCEPTED_ERROR)
  // {
  //   Serial.print("PE3 error: ");
  //   Serial.println(pe3_error);
  //   relay(false, PE3FPRD);
  // }
  // if (eth_c < 0 || eth_error > ACCEPTED_ERROR)
  // {
  //   Serial.print("ETH error: ");
  //   Serial.println(eth_error);
  //   relay(false, ENGRD);
  // }
  // if (eng_c < 0 || eng_error > ACCEPTED_ERROR)
  // {
  //   Serial.print("ENG error: ");
  //   Serial.println(eng_error);
  //   relay(false, ENGRD);
  // }
  // if (fp_c < 0 || fp_error > ACCEPTED_ERROR)
  // {
  //   Serial.print("FP error: ");
  //   Serial.println(fp_error);
  //   relay(false, PE3FPRD);
  // }
  // if (fan_c < 0 || fan_error > ACCEPTED_ERROR)
  // {
  //   Serial.print("FAN error: ");
  //   Serial.println(fan_error);
  //   relay(false, PE3FANRD);
  // }
  // if (can_c < 0 || can_error > ACCEPTED_ERROR)
  // {
  //   Serial.print("CAN error: ");
  //   Serial.println(can_error);
  //   relay(false, CANRD);
  // }
  // if (wtp_c < 0 || wtp_error > ACCEPTED_ERROR)
  // {
  //   Serial.print("WTP error: ");
  //   Serial.println(wtp_error);
  //   relay(false, WTPRD);
  // }
  // if (str_c < 0 || str_error > ACCEPTED_ERROR)
  // {
  //   Serial.print("STR error: ");
  //   Serial.println(str_error);
  //   relay(false, STRRD);
  // }



  // TODO: water pump: start whenever engine is turned on, stop when coolant temp gets low enough
  // get coolant temp from CAN
  // CAN.filter(2365584712); // coolant temp ID from DBC file
  // CAN.onReceive(onReceive);

  // push to start
  // timeout after 2s
  // enable starter relay, stop when RPM >1000
  // get RPM from CAN

  // ethrottle (ETHF)

  // read voltage of battery
  // datasheet says minimum preferred is 8V
  // added 20% factor of safety
  // if (bat123_v < LOW_VOLTAGE && strin_v > ANALOG_LOW)
  // {
  //   Serial.print("Battery voltage too low: ");
  //   Serial.println(bat123_v);
  //   for (int i = 0; i < 8; i++)
  //   {
  //     relay(false, i);
  //   }
  //   low_battery = true;
  // }

  // TODO: Send CAN data
  // TODO: Ethrottle protections
}

// void onReceive()
// {
//   uint16_t msg;
//   for (int i = 0; i < 6; i++)
//   {
//     int b = CAN.read();
//     if (i == 4)
//     {
//       msg = b << 8; // left shift first byte
//     }
//     if (i == 5)
//     {
//       msg |= b; // or second byte
//     }
//   }
//   coolant_temp = msg;
// }
